// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    // array of powers of two for internal use
    static Array mask;

    /** Initializes the library. */
    function void init() {
        var int i;
        let mask = Array.new(16);

        while (i < 16) {
            if (i = 0) {
                let mask[0] = 1;
            } else {
                let mask[i] = mask[i - 1] + mask[i - 1];
            }
            let i = i + 1;
        }

        return;
    }

    /**
    * Returns true if the i-th bit of x is 1, false otherwise
    */
    function boolean bit(int x, int i) {
        return ~((mask[i] & x) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return x * -1;
        }

        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, sum, shiftedX;

        let shiftedX = x;

        // 16 is the number of bits
        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;

            let i = i + 1;
        }

        return sum;
    }

    function int internalDivide(int x, int y) {
        var int q;

        if ((y > x) | (y < 0)) {
            return 0;
        }
    
        let q = Math.internalDivide(x, 2 * y);
        if ((x - (2 * q * y)) < y) {
            return 2 * q;
        } else {
            return (2 * q) + 1;
        }
    
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var boolean isNegative;

        let isNegative = (x < 0) | (y < 0);
        let x = Math.abs(x);
        let y = Math.abs(y);
        

        if (isNegative) {
            return Math.internalDivide(x, y) * -1;
        } else {
            return Math.internalDivide(x, y);
        }
    
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, yPlus2, yPlus2Sq;
        let y = 0;
        let j = 7; // 16 bits / 2 - 1
        while (j > -1) {
          let yPlus2 = y + mask[j];
          let yPlus2Sq = yPlus2 * yPlus2;
          if ((yPlus2Sq > 0) & ((yPlus2Sq < x) | (yPlus2Sq = x))) {
            let y = yPlus2;
          }
          let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (b > a) {
            return b;
        }

        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (b < a) {
            return b;
        }

        return a;
    }

    /** Returns the remainder of a divided by b. */
    function int rem(int a, int b) {
        return a - ((a / b) * b);
    }

    /** Returns a number representing the given base taken to the power of the given exponent. */
    function int pow(int base, int exponent) {
        var int i, result;

        if (exponent = 0) {
            return 1;
        }

        let i = 1;
        let result = base;

        while (i < exponent) {
            let result = result * base;
            let i = i + 1;
        }

        return result;
    }
}
