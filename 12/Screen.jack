// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
 class Screen {
    static boolean color;
    static int baseAddress;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let baseAddress = 16384;
        
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var boolean originColor;
        let originColor = color;

        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, 511, 255);
        do Screen.setColor(originColor);

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value;
        let address = (32 * y) + (x / 16) + baseAddress;
        let value = Memory.peek(address);

        if (color) {
            do Memory.poke(address, value | Math.pow(2, Math.rem(x, 16)));
            return;
        } else {
            do Memory.poke(address, value & (-1 - Math.pow(2, Math.rem(x, 16))));
            return;
        }
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff, stepX, stepY, dxAbs, dyAbs;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let dxAbs = Math.abs(dx);
        let dyAbs = Math.abs(dy);
        if (~(dx = 0)) {
            let stepX = dx / dxAbs;
        }
        if (~(dy = 0)) {
            let stepY = dy / dyAbs;
        }

        if (dx = 0) {
            while ((b < dyAbs) | (b = dyAbs)) {
                do Screen.drawPixel(x1, y1 + (b * stepY));
                let b = b + 1;
            }

            return;
        }

        if (dy = 0) {
            while ((b < dxAbs) | (b = dxAbs)) {
                do Screen.drawPixel(x1 + (b * stepX), y1);
                let b = b + 1;
            }

            return;
        }

        while (((a < dxAbs) | (a = dxAbs)) & ((b < dyAbs) | (b = dyAbs))) {
            do Screen.drawPixel(x1 + (a * stepX), y1 + (b * stepY));

            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dyAbs;
            } else {
                let b = b + 1;
                let diff = diff - dxAbs;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i;

        while (i < (y2 - y1)) {
            do Screen.drawLine(x1, y1 + i, x2, y1 + i);
            let i = i + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        let dy = r;

        while ((dy > -r) | (dy = -r)) {
            do Screen.drawLine(
                x - Math.sqrt(Math.pow(r, 2) - Math.pow(dy, 2)),
                y + dy,
                x + Math.sqrt(Math.pow(r, 2) - Math.pow(dy, 2)),
                y + dy
            );
            let dy = dy - 1;
        }

        return;
    }
}
